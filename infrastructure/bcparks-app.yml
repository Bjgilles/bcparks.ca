apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: bcparks
  description: >-
    Deployment template for the BC Parks App
parameters:
- name: NAME
  displayName: Name
  description: A prefix appended to all objects
  required: true
  value: bcparks
- name: OC_NAMESPACE
  required: true
  value: 61d198
- name: OC_APP
  required: true
- name: FRONTEND_POD
  required: true
  value: web
- name: FRONTEND_URL
  required: true
- name: CMS_POD
  required: true
  value: cms
- name: CMS_URL
  required: true
  value: cms
- name: API_POD
  required: true
  value: api
- name: API_URL
  required: true
- name: ASP_ENV
  value: Development
  required: true
- name: DB_POD
  value: db
  required: true
- name: STAGING_POD
  value: staging
  required: true
- name: DB_PORT
  value: "5432"
- name: DB_SSL
  value: "false"
- name: WEB_SCHEMA
  value: http
- name: URL_STUB
  value: "-61d198-dev.apps.silver.devops.gov.bc.ca"
  required: false
- name: API_HOST_PREFIX
  value: api

objects:
### Frontend
#   Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${FRONTEND_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
      app.openshift.io/runtime: nodejs
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${FRONTEND_POD}
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${NAME}
          name: ${FRONTEND_POD}
      spec:
        containers:
          - envFrom:
              - secretRef:
                  name: bcparks-secrets
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/frontend:${OC_APP}
            name: ${FRONTEND_POD}
            ports:
              - containerPort: 3000
              - containerPort: 8080
            resources:
              limits:
                cpu: 300m
                memory: 1Gi
              # requests:
              #   cpu: 500m
              #   memory: 512Mi
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${FRONTEND_POD}
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'frontend:${OC_APP}'
  status: {}
#   Frontend Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${FRONTEND_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
  spec:
    ports:
      - name: "npm"
        port: 3000
        targetPort: 3000
      - name: "http"
        port: 8080
        targetPort: 8080
      - name: "https"
        port: 8443
        targetPort: 8443
    selector:
      name: ${FRONTEND_POD}
# #   Frontend Route
# - apiVersion: route.openshift.io/v1
#   kind: Route
#   namespace: ${OC_NAMESPACE}-${OC_APP}
#   labels:
#     app: ${FRONTEND_POD}
#     app.kubernetes.io/component: ${NAME}
#     app.kubernetes.io/instance: ${NAME}
#     app.kubernetes.io/part-of: ${NAME}
#   metadata:
#     name: ${FRONTEND_POD}
#     namespace: ${OC_NAMESPACE}-${OC_APP}
#   spec:
#     host: ${FRONTEND_URL}${URL_STUB}
#     to:
#       kind: Service
#       name: ${FRONTEND_POD}
#       weight: 100
#     port:
#       targetPort: npm
#     tls:
#         insecureEdgeTerminationPolicy: Allow
#         termination: edge

### CMS
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${CMS_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
      app.openshift.io/runtime: nodejs
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${CMS_POD} 
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${NAME}
          name: ${CMS_POD}
      spec:
        containers:
          - env:
              - name: DATABASE_HOST
                value: ${DB_POD}
              - name: DATABASE_PORT
                value: ${DB_PORT}    
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/strapi:${OC_APP}
            name: ${CMS_POD}
            resources:
              limits:
                cpu: '1'
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 256Mi               
            ports:
              - containerPort: 1337
            volumeMounts:
              - mountPath: /opt/app-root/src/public/uploads
                name: ${CMS_POD}-data         
            envFrom:
              - secretRef:
                  name: bcparks-secrets
        volumes:
          - name: ${CMS_POD}-data
            persistentVolumeClaim:
              claimName: '${CMS_POD}-data'     
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${CMS_POD}
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'strapi:${OC_APP}'

  status: {}
  #   cms Persistent Volume Claim
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${CMS_POD}-data
    namespace: ${OC_NAMESPACE}-${OC_APP}
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 4Gi
  status:
    accessModes:
      - ReadWriteMany
    capacity:
      storage: 10Gi
#   CMS Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${CMS_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
  spec:
    ports:
      - name: ${CMS_POD}
        port: 1337
        targetPort: 1337
    selector:
      name: ${CMS_POD}
# #   CMS Route
# - apiVersion: route.openshift.io/v1
#   kind: Route
#   namespace: ${OC_NAMESPACE}-${OC_APP}
#   labels:
#     app: ${CMS_POD}
#     app.kubernetes.io/component: ${NAME}
#     app.kubernetes.io/instance: ${NAME}
#     app.kubernetes.io/part-of: ${NAME}
#   metadata:
#     name: ${CMS_POD}
#     namespace: ${OC_NAMESPACE}-${OC_APP}
#   spec:
#     host: ${CMS_URL}${URL_STUB}
#     to:
#       kind: Service
#       name: ${CMS_POD}
#       weight: 100
#     port:
#       targetPort: 1337
#     tls:
#         insecureEdgeTerminationPolicy: Allow
#         termination: edge

### Database
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${DB_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
      app.openshift.io/runtime: postgresql
  spec:
    replicas: 1
    selector:
      name: ${DB_POD}    
    strategy: null
    template:
      metadata:
        labels:
          dev-app: ${NAME}
          name: ${DB_POD}
      spec:
        containers:
          - capabilities: {}
            env:
              - name: DB_HOST
                value: ${DB_POD}
              # PostgreSQL environment variables
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    key: DATABASE_PASSWORD
                    name: bcparks-secrets
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    key: DATABASE_USERNAME
                    name: bcparks-secrets
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: DATABASE_PASSWORD
                    name: bcparks-secrets
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: DATABASE_NAME
                    name: bcparks-secrets
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/postgresql:12
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ['pg_ctl', 'stop']
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 240
            name: ${DB_POD}
            resources:
              limits:
                cpu: 1000m
                memory: 1Gi
              # requests:
              #   cpu: 500m
              #   memory: 512Mi            
            ports:
              - containerPort: 5432
                protocol: TCP
                name: postgresql   
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
              - mountPath: /var/lib/pgsql/data
                name: ${DB_POD}-data
              - mountPath: /var/run/postgresql
                name: ${DB_POD}-run
            envFrom:
              - secretRef:
                  name: bcparks-secrets
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
          - name: ${DB_POD}-data
            persistentVolumeClaim:
              claimName: '${DB_POD}-data'
          - name: ${DB_POD}-run
            emptyDir: {}
  status: {}
#   Database Persistent Volume Claim
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DB_POD}-data
    namespace: ${OC_NAMESPACE}-${OC_APP}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 4Gi
  status:
    accessModes:
      - ReadWriteOnce
    capacity:
      storage: 4Gi
#   DB Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${DB_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
  spec:
    ports:
      - name: ${DB_POD}
        nodePort: 0
        port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      name: ${DB_POD}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

### Staging
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${STAGING_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
      app.openshift.io/runtime: nodejs
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${STAGING_POD}    
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${NAME}
          name: ${STAGING_POD}
      spec:
        containers:
          - capabilities: {}
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/staging:${OC_APP}
            name: ${STAGING_POD}
            resources:
              limits:
                cpu: '1'
                memory: 6Gi
              requests:
                cpu: 250m
                memory: 4Gi            
            ports:
              - containerPort: 8000
            envFrom:
              - secretRef:
                  name: bcparks-secrets
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${STAGING_POD}
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'staging:${OC_APP}'
  status: {}
#   Staging Service
- apiVersion: v1
  namespace: ${OC_NAMESPACE}-${OC_APP}
  kind: Service
  metadata:
    name: staging
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
  spec:
    ports:
      - name: ${STAGING_POD}
        port: 8000
        targetPort: 8000
    selector:
      name: ${STAGING_POD}
# #   Staging Route
# - apiVersion: route.openshift.io/v1
#   kind: Route
#   namespace: ${OC_NAMESPACE}-${OC_APP}
#   labels:
#     app: ${STAGING_POD}
#     app.kubernetes.io/component: ${NAME}
#     app.kubernetes.io/instance: ${NAME}
#     app.kubernetes.io/part-of: ${NAME}
#   metadata:
#     name: ${STAGING_POD}
#     namespace: ${OC_NAMESPACE}-${OC_APP}
#   spec:
#     host: ${STAGING_POD}${URL_STUB}
#     to:
#       kind: Service
#       name: staging
#       weight: 100
#     port:
#       targetPort: ${STAGING_POD}
#     tls:
#       insecureEdgeTerminationPolicy: Allow
#       termination: edge

### API
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${API_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
      app.openshift.io/runtime: dotnet
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${API_POD}  
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${NAME}
          name: ${API_POD}
      spec:
        containers:
          - env:
              - name: ASPNETCORE_ENVIRONMENT
                value: ${ASP_ENV}
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/api:${OC_APP}
            name: ${API_POD}
            resources:
              limits:
                cpu: 300m
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 512Mi            
            ports:
              - containerPort: 5000
            envFrom:
              - secretRef:
                  name: bcparks-secrets        
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${API_POD}
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'api:${OC_APP}'
  status: {}
#   API Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${API_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${NAME}
  spec:
    ports:
      - name: ${API_POD}
        port: 5000
        targetPort: 5000
    selector:
      name: ${API_POD}

# #   API Route
- apiVersion: route.openshift.io/v1
  kind: Route
  namespace: ${OC_NAMESPACE}-${OC_APP}
  labels:
    app: ${API_POD}
    app.kubernetes.io/component: ${NAME}
    app.kubernetes.io/instance: ${NAME}
    app.kubernetes.io/part-of: ${NAME}
  metadata:
    name: ${API_POD}-route
    namespace: ${OC_NAMESPACE}-${OC_APP}
  spec:
    host: ${API_HOST_PREFIX}${URL_STUB}
    to:
      kind: Service
      name: ${API_POD}
      weight: 100
    port:
      targetPort: ${API_POD}
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    
### Network Policy
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-internal-traffic
    namespace: ${OC_NAMESPACE}-${OC_APP}
  spec:
    podSelector: {}
    ingress:
      - ports:
          - protocol: TCP
            port: 1337
          - protocol: TCP
            port: 3000
          - protocol: TCP
            port: 8080
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 5432
          - protocol: TCP
            port: 8000
          - protocol: TCP
            port: 5000
    policyTypes:
      - Ingress
